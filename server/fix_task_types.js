const mysql = require('mysql2/promise');
require('dotenv').config();

async function fixTaskTypes() {
  let connection;
  
  try {
    console.log('üéØ TASK TYPEID verilerini d√ºzeltiyorum...');
    
    // Veritabanƒ± baƒülantƒ±sƒ±
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'crmuser',
      password: process.env.DB_PASSWORD || 'crmpassword',
      database: process.env.DB_NAME || 'mydatabase',
      charset: 'utf8mb4'
    });
    
    console.log('‚úÖ Veritabanƒ± baƒülantƒ±sƒ± kuruldu');
    
    // Charset ayarla
    await connection.execute('SET NAMES utf8mb4');
    await connection.execute('SET CHARACTER SET utf8mb4');
    
    // Foreign key kontrollerini ge√ßici olarak kapat
    await connection.execute('SET FOREIGN_KEY_CHECKS = 0');
    
    // TYPEID problemlerini kontrol et
    const [nullTypes] = await connection.execute('SELECT COUNT(*) as count FROM TASK WHERE TYPEID IS NULL');
    const [zeroTypes] = await connection.execute('SELECT COUNT(*) as count FROM TASK WHERE TYPEID = 0');
    
    console.log(`üìä TYPEID NULL olan g√∂revler: ${nullTypes[0].count}`);
    console.log(`üìä TYPEID 0 olan g√∂revler: ${zeroTypes[0].count}`);
    
    // TYPEID=0 i√ßin TASKTYPE ekle
    try {
      await connection.execute(`
        INSERT INTO TASKTYPE (ID, NAME, ORID) 
        VALUES (0, 'Genel G√∂rev', 10776)
      `);
      console.log('‚úÖ TYPEID=0 i√ßin "Genel G√∂rev" task type eklendi');
    } catch (error) {
      if (error.code !== 'ER_DUP_ENTRY') {
        console.warn(`‚ö†Ô∏è TASKTYPE eklenirken hata: ${error.message}`);
      }
    }
    
    // TYPEID NULL olanlarƒ± 0 yap (Genel g√∂rev)
    if (nullTypes[0].count > 0) {
      await connection.execute('UPDATE TASK SET TYPEID = 0 WHERE TYPEID IS NULL');
      console.log(`‚úÖ ${nullTypes[0].count} g√∂revin TYPEID'si NULL'dan 0'a g√ºncellendi`);
    }
    
    // Tarih verilerini kontrol et
    const [withDates] = await connection.execute(`
      SELECT COUNT(*) as count FROM TASK 
      WHERE DATETIME IS NOT NULL OR DATETIMEDUE IS NOT NULL
    `);
    
    const [withoutDates] = await connection.execute(`
      SELECT COUNT(*) as count FROM TASK 
      WHERE DATETIME IS NULL AND DATETIMEDUE IS NULL
    `);
    
    console.log(`üìä Tarih bilgisi olan g√∂revler: ${withDates[0].count}`);
    console.log(`üìä Tarih bilgisi olmayan g√∂revler: ${withoutDates[0].count}`);
    
    // TASKTYPE daƒüƒ±lƒ±mƒ±nƒ± g√∂ster
    const [typeStats] = await connection.execute(`
      SELECT t.TYPEID, tt.NAME, COUNT(*) as count 
      FROM TASK t 
      LEFT JOIN TASKTYPE tt ON t.TYPEID = tt.ID 
      GROUP BY t.TYPEID, tt.NAME 
      ORDER BY count DESC 
      LIMIT 10
    `);
    
    console.log('üìä G√∂rev tipi daƒüƒ±lƒ±mƒ±:');
    typeStats.forEach(stat => {
      const typeName = stat.NAME || 'Bilinmeyen';
      console.log(`   - ${stat.TYPEID}: ${typeName} (${stat.count} g√∂rev)`);
    });
    
    // Foreign key kontrollerini tekrar a√ß
    await connection.execute('SET FOREIGN_KEY_CHECKS = 1');
    
    console.log('üéâ TASK TYPEID d√ºzeltmeleri tamamlandƒ±!');
    
  } catch (error) {
    console.error('‚ùå Hata:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

fixTaskTypes();