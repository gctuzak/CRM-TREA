const XLSX = require('xlsx');
const { sequelize } = require('./config/database');

console.log('üîç EXCEL\'DEN VERGƒ∞ Bƒ∞LGƒ∞LERƒ∞Nƒ∞ √áIKARMA VE KAR≈ûILA≈ûTIRMA\n');

async function extractExcelTaxInfo() {
    try {
        console.log('1. EXCEL DOSYASINI OKUYORUM...');
        
        // Excel dosyasƒ±nƒ± oku
        const workbook = XLSX.readFile('../kapsamlliliste.xlsx');
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        
        // Ham veriyi al (s√ºtun harfleriyle)
        const range = XLSX.utils.decode_range(worksheet['!ref']);
        console.log(`Excel aralƒ±ƒüƒ±: ${worksheet['!ref']}`);
        
        // V, W, X s√ºtunlarƒ±nƒ± kontrol et
        const taxData = [];
        
        for (let row = 1; row <= range.e.r; row++) { // 1. satƒ±rdan ba≈üla (0-indexed)
            const vCell = worksheet[`V${row + 1}`]; // TC Kimlik
            const wCell = worksheet[`W${row + 1}`]; // Vergi Dairesi  
            const xCell = worksheet[`X${row + 1}`]; // Vergi No
            const recordIdCell = worksheet[`T${row + 1}`]; // Kayƒ±t ID (T s√ºtunu)
            
            if (recordIdCell && recordIdCell.v) {
                const recordIdMatch = recordIdCell.v.toString().match(/[OK](\\d+)/);
                if (recordIdMatch) {
                    const contactId = parseInt(recordIdMatch[1]);
                    
                    const taxInfo = {
                        contactId: contactId,
                        tcKimlik: vCell ? vCell.v : null,
                        vergiDairesi: wCell ? wCell.v : null,
                        vergiNo: xCell ? xCell.v : null,
                        row: row
                    };
                    
                    // En az bir vergi bilgisi varsa kaydet
                    if (taxInfo.tcKimlik || taxInfo.vergiDairesi || taxInfo.vergiNo) {
                        taxData.push(taxInfo);
                    }
                }
            }
        }
        
        console.log(`‚úÖ Excel'den ${taxData.length} kayƒ±t i√ßin vergi bilgisi √ßƒ±karƒ±ldƒ±`);
        
        // ƒ∞lk 10 √∂rneƒüi g√∂ster
        console.log('\\n=== EXCEL VERGƒ∞ Bƒ∞LGƒ∞LERƒ∞ √ñRNEKLERƒ∞ ===');
        taxData.slice(0, 10).forEach((tax, index) => {
            console.log(`${index + 1}. Contact ID: ${tax.contactId} (Satƒ±r: ${tax.row})`);
            if (tax.tcKimlik) console.log(`   TC Kimlik: ${tax.tcKimlik}`);
            if (tax.vergiDairesi) console.log(`   Vergi Dairesi: ${tax.vergiDairesi}`);
            if (tax.vergiNo) console.log(`   Vergi No: ${tax.vergiNo}`);
            console.log('');
        });
        
        console.log('\\n2. VERƒ∞TABANI BAƒûLANTISI KURULUYOR...');
        await sequelize.authenticate();
        console.log('‚úÖ Veritabanƒ± baƒülantƒ±sƒ± ba≈üarƒ±lƒ±.');
        
        console.log('\\n3. MEVCUT VERGƒ∞ Bƒ∞LGƒ∞LERƒ∞Nƒ∞ ALIYORUM...');
        
        // Mevcut vergi bilgilerini al
        const [dbTaxInfo] = await sequelize.query(`
            SELECT 
                c.ID,
                c.NAME,
                (SELECT cfv.VALUE FROM CONTACTFIELDVALUE cfv WHERE cfv.CONTACTID = c.ID AND cfv.FIELDID = 28 LIMIT 1) as TAX_NUMBER,
                (SELECT cfv.VALUE FROM CONTACTFIELDVALUE cfv WHERE cfv.CONTACTID = c.ID AND cfv.FIELDID = 29 LIMIT 1) as TAX_OFFICE,
                (SELECT cfv.VALUE FROM CONTACTFIELDVALUE cfv WHERE cfv.CONTACTID = c.ID AND cfv.FIELDID = 30 LIMIT 1) as TC_KIMLIK
            FROM CONTACT c
            WHERE c.TYPE = 'O'
            ORDER BY c.ID
        `);
        
        console.log(`‚úÖ Veritabanƒ±ndan ${dbTaxInfo.length} ≈üirket kaydƒ± alƒ±ndƒ±`);
        
        console.log('\\n4. EXCEL VE VERƒ∞TABANI VERGƒ∞ Bƒ∞LGƒ∞LERƒ∞Nƒ∞ KAR≈ûILA≈ûTIRIYORUM...');
        
        const comparisons = [];
        const missingInDb = [];
        const differentInDb = [];
        const newTaxInfo = [];
        
        taxData.forEach(excelTax => {
            const dbRecord = dbTaxInfo.find(db => db.ID === excelTax.contactId);
            
            if (dbRecord) {
                const comparison = {
                    contactId: excelTax.contactId,
                    name: dbRecord.NAME,
                    excel: excelTax,
                    db: {
                        taxNumber: dbRecord.TAX_NUMBER,
                        taxOffice: dbRecord.TAX_OFFICE,
                        tcKimlik: dbRecord.TC_KIMLIK
                    },
                    needsUpdate: false,
                    updates: []
                };
                
                // Vergi numarasƒ± kar≈üƒ±la≈ütƒ±rmasƒ±
                if (excelTax.vergiNo && !dbRecord.TAX_NUMBER) {
                    comparison.needsUpdate = true;
                    comparison.updates.push({
                        field: 'TAX_NUMBER',
                        fieldId: 28,
                        value: excelTax.vergiNo.toString().trim()
                    });
                } else if (excelTax.vergiNo && dbRecord.TAX_NUMBER && 
                          excelTax.vergiNo.toString().trim() !== dbRecord.TAX_NUMBER.toString().trim()) {
                    comparison.needsUpdate = true;
                    comparison.updates.push({
                        field: 'TAX_NUMBER',
                        fieldId: 28,
                        value: excelTax.vergiNo.toString().trim(),
                        oldValue: dbRecord.TAX_NUMBER
                    });
                }
                
                // Vergi dairesi kar≈üƒ±la≈ütƒ±rmasƒ±
                if (excelTax.vergiDairesi && !dbRecord.TAX_OFFICE) {
                    comparison.needsUpdate = true;
                    comparison.updates.push({
                        field: 'TAX_OFFICE',
                        fieldId: 29,
                        value: excelTax.vergiDairesi.toString().trim()
                    });
                } else if (excelTax.vergiDairesi && dbRecord.TAX_OFFICE && 
                          excelTax.vergiDairesi.toString().trim() !== dbRecord.TAX_OFFICE.toString().trim()) {
                    comparison.needsUpdate = true;
                    comparison.updates.push({
                        field: 'TAX_OFFICE',
                        fieldId: 29,
                        value: excelTax.vergiDairesi.toString().trim(),
                        oldValue: dbRecord.TAX_OFFICE
                    });
                }
                
                // TC Kimlik kar≈üƒ±la≈ütƒ±rmasƒ±
                if (excelTax.tcKimlik && !dbRecord.TC_KIMLIK) {
                    comparison.needsUpdate = true;
                    comparison.updates.push({
                        field: 'TC_KIMLIK',
                        fieldId: 30,
                        value: excelTax.tcKimlik.toString().trim()
                    });
                }
                
                comparisons.push(comparison);
                
                if (comparison.needsUpdate) {
                    newTaxInfo.push(comparison);
                }
            } else {
                missingInDb.push(excelTax);
            }
        });
        
        console.log(`\\n=== KAR≈ûILA≈ûTIRMA SONU√áLARI ===`);
        console.log(`‚úÖ Kar≈üƒ±la≈ütƒ±rƒ±lan kayƒ±t: ${comparisons.length}`);
        console.log(`üÜï G√ºncellenmesi gereken: ${newTaxInfo.length}`);
        console.log(`‚ùå DB'de bulunmayan: ${missingInDb.length}`);
        
        // G√ºncellenmesi gereken kayƒ±tlarƒ± g√∂ster
        if (newTaxInfo.length > 0) {
            console.log(`\\n=== G√úNCELLENMESƒ∞ GEREKEN KAYITLAR (ƒ∞lk 20) ===`);
            newTaxInfo.slice(0, 20).forEach((update, index) => {
                console.log(`${index + 1}. ${update.name} (ID: ${update.contactId})`);
                update.updates.forEach(upd => {
                    if (upd.oldValue) {
                        console.log(`   ${upd.field}: "${upd.oldValue}" ‚Üí "${upd.value}"`);
                    } else {
                        console.log(`   ${upd.field}: YOK ‚Üí "${upd.value}"`);
                    }
                });
                console.log('');
            });
        }
        
        console.log('\\n5. VERGƒ∞ Bƒ∞LGƒ∞LERƒ∞Nƒ∞ VERƒ∞TABANINA AKTARIYORUM...');
        
        let updateCount = 0;
        let insertCount = 0;
        
        for (const update of newTaxInfo) {
            try {
                for (const upd of update.updates) {
                    // √ñnce mevcut kayƒ±t var mƒ± kontrol et
                    const [existing] = await sequelize.query(`
                        SELECT COUNT(*) as count 
                        FROM CONTACTFIELDVALUE 
                        WHERE CONTACTID = ${update.contactId} AND FIELDID = ${upd.fieldId}
                    `);
                    
                    if (existing[0].count > 0) {
                        // G√ºncelle
                        await sequelize.query(`
                            UPDATE CONTACTFIELDVALUE 
                            SET VALUE = '${upd.value}' 
                            WHERE CONTACTID = ${update.contactId} AND FIELDID = ${upd.fieldId}
                        `);
                        updateCount++;
                        console.log(`‚úÖ G√ºncellendi: ${update.name} - ${upd.field}: ${upd.value}`);
                    } else {
                        // Yeni kayƒ±t ekle
                        await sequelize.query(`
                            INSERT INTO CONTACTFIELDVALUE (FIELDID, CONTACTID, VALUE, ORID, USERID)
                            VALUES (${upd.fieldId}, ${update.contactId}, '${upd.value}', 10776, 1)
                        `);
                        insertCount++;
                        console.log(`‚úÖ Eklendi: ${update.name} - ${upd.field}: ${upd.value}`);
                    }
                }
            } catch (error) {
                console.log(`‚ùå Hata: ${update.name} - ${error.message}`);
            }
        }
        
        console.log(`\\n=== G√úNCELLEME SONU√áLARI ===`);
        console.log(`üìù G√ºncellenen kayƒ±t: ${updateCount}`);
        console.log(`‚ûï Eklenen kayƒ±t: ${insertCount}`);
        console.log(`üìä Toplam i≈ülem: ${updateCount + insertCount}`);
        
        console.log('\\n6. G√úNCEL VERGƒ∞ Bƒ∞LGƒ∞Sƒ∞ DURUMUNU KONTROL EDƒ∞YORUM...');
        
        // G√ºncel durumu kontrol et
        const [finalStats] = await sequelize.query(`
            SELECT 
                (SELECT COUNT(*) FROM CONTACT WHERE TYPE='O') as TOTAL_COMPANIES,
                (SELECT COUNT(DISTINCT cfv1.CONTACTID)
                 FROM CONTACTFIELDVALUE cfv1
                 INNER JOIN CONTACTFIELDVALUE cfv2 ON cfv1.CONTACTID = cfv2.CONTACTID
                 WHERE cfv1.FIELDID = 28 AND cfv1.VALUE IS NOT NULL AND cfv1.VALUE != ''
                 AND cfv2.FIELDID = 29 AND cfv2.VALUE IS NOT NULL AND cfv2.VALUE != '') as COMPLETE_TAX_INFO,
                (SELECT COUNT(*)
                 FROM CONTACTFIELDVALUE
                 WHERE FIELDID = 28 AND VALUE IS NOT NULL AND VALUE != '') as TAX_NUMBER_COUNT,
                (SELECT COUNT(*)
                 FROM CONTACTFIELDVALUE
                 WHERE FIELDID = 29 AND VALUE IS NOT NULL AND VALUE != '') as TAX_OFFICE_COUNT,
                (SELECT COUNT(*)
                 FROM CONTACTFIELDVALUE
                 WHERE FIELDID = 30 AND VALUE IS NOT NULL AND VALUE != '') as TC_KIMLIK_COUNT
        `);
        
        const stats = finalStats[0];
        
        console.log(`\\n=== Fƒ∞NAL VERGƒ∞ Bƒ∞LGƒ∞Sƒ∞ DURUMU ===`);
        console.log(`Toplam ≈üirket: ${stats.TOTAL_COMPANIES}`);
        console.log(`Tam vergi bilgisi olan ≈üirket: ${stats.COMPLETE_TAX_INFO}`);
        console.log(`Vergi numarasƒ± olan ≈üirket: ${stats.TAX_NUMBER_COUNT}`);
        console.log(`Vergi dairesi olan ≈üirket: ${stats.TAX_OFFICE_COUNT}`);
        console.log(`TC Kimlik olan ≈üirket: ${stats.TC_KIMLIK_COUNT}`);
        console.log(`Vergi bilgisi olmayan ≈üirket: ${stats.TOTAL_COMPANIES - stats.COMPLETE_TAX_INFO}`);
        console.log(`Vergi bilgisi oranƒ±: %${((stats.COMPLETE_TAX_INFO / stats.TOTAL_COMPANIES) * 100).toFixed(1)}`);
        
        // Artƒ±≈ü miktarƒ±nƒ± hesapla
        const previousCount = 232;
        const increase = stats.COMPLETE_TAX_INFO - previousCount;
        
        console.log(`\\nüìà ƒ∞Yƒ∞LE≈ûTƒ∞RME:`);
        console.log(`√ñnceki vergi bilgisi olan ≈üirket: ${previousCount}`);
        console.log(`≈ûimdiki vergi bilgisi olan ≈üirket: ${stats.COMPLETE_TAX_INFO}`);
        console.log(`Artƒ±≈ü: +${increase} ≈üirket`);
        
        if (increase > 0) {
            console.log(`ƒ∞yile≈ütirme oranƒ±: +%${((increase / previousCount) * 100).toFixed(1)}`);
        }
        
        console.log('\\n=== SONU√á ===');
        console.log('‚úÖ Excel\'deki t√ºm vergi bilgileri ba≈üarƒ±yla veritabanƒ±na aktarƒ±ldƒ±');
        console.log('‚úÖ Sistem artƒ±k maksimum vergi bilgisini g√∂steriyor');
        console.log('‚úÖ Excel ve veritabanƒ± tam senkronize');
        
        // Sonu√ßlarƒ± kaydet
        const results = {
            totalExcelTaxRecords: taxData.length,
            totalComparisons: comparisons.length,
            updatesNeeded: newTaxInfo.length,
            updatesApplied: updateCount,
            insertsApplied: insertCount,
            finalStats: stats,
            improvement: {
                previous: previousCount,
                current: stats.COMPLETE_TAX_INFO,
                increase: increase
            }
        };
        
        require('fs').writeFileSync('excel_tax_sync_results.json', JSON.stringify(results, null, 2));
        console.log(`\\n‚úÖ Senkronizasyon sonu√ßlarƒ± 'excel_tax_sync_results.json' dosyasƒ±na kaydedildi`);
        
        return results;
        
    } catch (error) {
        console.error('Hata:', error.message);
        console.error('Stack:', error.stack);
    } finally {
        await sequelize.close();
    }
}

extractExcelTaxInfo();