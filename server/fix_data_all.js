const { Sequelize } = require('sequelize');

// Database configuration with utf8mb4
const sequelize = new Sequelize({
  dialect: 'mysql',
  host: 'localhost',
  port: 3306,
  database: 'mydatabase',
  username: 'migration_user',
  password: 'migration_pass',
  
  dialectOptions: {
    charset: 'utf8mb4'
  },
  
  logging: false // Sadece √∂nemli loglarƒ± g√∂ster
});

// T√ºrk√ße karakter d√ºzeltme fonksiyonu - son versiyon
function fixTurkishChars(text) {
  if (!text) return text;
  if (typeof text !== 'string') return text;
  
  // Bozuk T√ºrk√ße karakterleri d√ºzelt
  let fixed = text
    // Null karakterleri temizle
    .replace(/\u0000/g, '')
    
    // Soru i≈üaretlerini d√ºzelt
    .replace(/\?\?\?\? GYO/g, '√ñZEL GYO')
    .replace(/\?\?\? YAPIM/g, '√áAƒû YAPIM')
    .replace(/\?\?\?\?\?DEM/g, '√áƒ∞ƒûDEM')
    .replace(/\?\?\?gen/g, '√ú√ßgen')
    .replace(/\?\?\?GEN/g, '√ú√áGEN')
    .replace(/\?\?\?kr\?\?/g, '≈û√ºkr√º')
    .replace(/\?\?\?\?/g, '√ñZEL')
    .replace(/\?\?\?/g, '√áAƒû')
    
    // Yanlƒ±≈ü d√ºzeltilmi≈ü karakterleri d√ºzelt
    .replace(/ƒ∞/g, 'ƒ∞')
    .replace(/ƒ±/g, 'ƒ±')
    .replace(/≈ü/g, '≈ü')
    .replace(/ƒü/g, 'ƒü')
    .replace(/√º/g, '√º')
    .replace(/√∂/g, '√∂')
    .replace(/√ß/g, '√ß')
    
    // √ñzel karakter d√ºzeltmeleri
    .replace(/ƒ∞/g, '≈ü')
    .replace(/ƒ∞/g, 'ƒü')
    .replace(/ƒ∞/g, '√º')
    .replace(/ƒ∞/g, '√∂')
    .replace(/ƒ∞/g, '√ß')
    .replace(/ƒ∞/g, 'ƒ±')
    .replace(/ƒ∞/g, 'ƒ∞');
    
  return fixed;
}

// √ñzel kelime d√ºzeltme fonksiyonu
function fixSpecificWords(text) {
  if (!text) return text;
  if (typeof text !== 'string') return text;
  
  // √ñzel kelime d√ºzeltmeleri
  let fixed = text
    .replace(/Sƒ∞TE Yƒ∞NETƒ∞Cƒ∞L√ñZELƒ∞/g, 'Sƒ∞TE Y√ñNETƒ∞Cƒ∞Lƒ∞ƒûƒ∞')
    .replace(/Sƒ∞TE Yƒ∞NETƒ∞Cƒ∞L/g, 'Sƒ∞TE Y√ñNETƒ∞Cƒ∞L')
    .replace(/Yƒ∞NETƒ∞M/g, 'Y√ñNETƒ∞M')
    .replace(/ƒ∞Nƒ∞AAT/g, 'ƒ∞N≈ûAAT')
    .replace(/ƒ∞Nƒ∞\./g, 'ƒ∞N≈û.')
    .replace(/Mƒ∞H\./g, 'M√úH.')
    .replace(/Tƒ∞RK/g, 'T√úRK')
    .replace(/Tƒ∞rk/g, 'T√ºrk')
    .replace(/GAYRƒ∞MENKƒ∞L/g, 'GAYRƒ∞MENKUL')
    .replace(/Mƒ∞TEAHHƒ∞T/g, 'M√úTEAHHƒ∞T')
    .replace(/Mƒ∞HENDƒ∞S/g, 'M√úHENDƒ∞S')
    .replace(/Mƒ∞HENDƒ∞SLƒ∞K/g, 'M√úHENDƒ∞SLƒ∞K')
    .replace(/Mƒ∞Dƒ∞R/g, 'M√úD√úR')
    .replace(/Mƒ∞Dƒ∞RL/g, 'M√úD√úRL')
    .replace(/ƒ∞ƒ∞RKET/g, '≈ûƒ∞RKET')
    .replace(/ƒ∞ƒ∞RK/g, '≈ûƒ∞RK')
    .replace(/ƒ∞RK/g, '≈ûRK')
    .replace(/ƒ∞Tƒ∞\./g, '≈ûTƒ∞.')
    .replace(/LTD\.ƒ∞Tƒ∞/g, 'LTD.≈ûTƒ∞')
    .replace(/A\.ƒ∞\./g, 'A.≈û.')
    .replace(/ƒ∞ƒ∞\./g, '≈ûƒ∞.')
    .replace(/T√ñZEL/g, 'T√úZEL')
    .replace(/ƒ∞letiƒ∞im/g, 'ƒ∞leti≈üim')
    .replace(/ƒ∞nƒ∞/g, 'ƒ∞n≈ü')
    .replace(/ƒ∞th/g, 'ƒ∞th')
    .replace(/ƒ∞hr/g, 'ƒ∞hr')
    .replace(/ƒ∞LET√ñZELƒ∞M/g, 'ƒ∞LETƒ∞≈ûƒ∞M')
    .replace(/GEL√ñZELTƒ∞RME/g, 'GELƒ∞≈ûTƒ∞RME')
    .replace(/Yenidoƒ∞an/g, 'Yenidoƒüan')
    .replace(/Aslanaƒ∞zƒ∞/g, 'Aslanaƒüzƒ±');
    
  // √ñzel d√ºzeltmeler
  fixed = fixed
    .replace(/3K-ƒ∞LET√ñZELƒ∞M/g, '3K-ƒ∞LETƒ∞≈ûƒ∞M')
    .replace(/3S KALE GAYRƒ∞MENKUL GEL√ñZELTƒ∞RME/g, '3S KALE GAYRƒ∞MENKUL GELƒ∞≈ûTƒ∞RME');
    
  return fixed;
}

async function fixAllTables() {
  try {
    // Test connection
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established.');
    
    // T√ºm tablolarƒ± listele
    const [tables] = await sequelize.query(
      "SHOW TABLES"
    );
    
    console.log(`üìä Found ${tables.length} tables in database`);
    
    // ƒ∞≈ülenecek tablolarƒ± belirle (LEAD tablosunu hari√ß tut √ß√ºnk√º MySQL'de ayrƒ±lmƒ±≈ü kelime)
    const tablesToProcess = [];
    
    for (const tableObj of tables) {
      const tableName = tableObj[Object.keys(tableObj)[0]];
      // LEAD tablosunu atla
      if (tableName.toUpperCase() === 'LEAD') {
        console.log(`‚ö†Ô∏è Skipping reserved keyword table: ${tableName}`);
        continue;
      }
      tablesToProcess.push(tableName);
    }
    
    // Her tablo i√ßin i≈ülem yap
    for (const tableName of tablesToProcess) {
      console.log(`\nüîç Processing table: ${tableName}`);
      
      try {
        // Tablonun s√ºtunlarƒ±nƒ± al
        const [columns] = await sequelize.query(
          `SHOW COLUMNS FROM \`${tableName}\``
        );
        
        // Metin i√ßeren s√ºtunlarƒ± bul (VARCHAR, TEXT, CHAR, etc.)
        const textColumns = columns.filter(col => 
          col.Type.includes('varchar') || 
          col.Type.includes('text') || 
          col.Type.includes('char')
        );
        
        if (textColumns.length === 0) {
          console.log(`  ‚ÑπÔ∏è No text columns found in ${tableName}`);
          continue;
        }
        
        console.log(`  üìù Found ${textColumns.length} text columns in ${tableName}`);
        
        // T√ºm kayƒ±tlarƒ± al
        const [records] = await sequelize.query(
          `SELECT * FROM \`${tableName}\` LIMIT 1000`
        );
        
        console.log(`  üìä Processing ${records.length} records in ${tableName}`);
        
        // Her kayƒ±t i√ßin metin s√ºtunlarƒ±nƒ± d√ºzelt
        let fixedCount = 0;
        
        for (const record of records) {
          const updates = [];
          const values = [];
          
          // Her metin s√ºtunu i√ßin d√ºzeltme yap
          for (const column of textColumns) {
            const columnName = column.Field;
            const originalValue = record[columnName];
            
            // Eƒüer deƒüer varsa d√ºzelt
            if (originalValue && typeof originalValue === 'string') {
              // ƒ∞lk d√ºzeltme
              let fixedValue = fixTurkishChars(originalValue);
              // √ñzel kelime d√ºzeltmeleri
              fixedValue = fixSpecificWords(fixedValue);
              
              // Eƒüer deƒüi≈üiklik varsa g√ºncelleme listesine ekle
              if (fixedValue !== originalValue) {
                updates.push(`\`${columnName}\` = ?`);
                values.push(fixedValue);
              }
            }
          }
          
          // Eƒüer g√ºncelleme yapƒ±lacaksa
          if (updates.length > 0) {
            // ID s√ºtununu bul
            const idColumn = columns.find(col => col.Key === 'PRI');
            if (!idColumn) {
              console.log(`  ‚ö†Ô∏è No primary key found for table ${tableName}, skipping updates`);
              break;
            }
            
            const idColumnName = idColumn.Field;
            const idValue = record[idColumnName];
            
            // G√ºncelleme sorgusu olu≈ütur
            const updateQuery = `UPDATE \`${tableName}\` SET ${updates.join(', ')} WHERE \`${idColumnName}\` = ?`;
            values.push(idValue);
            
            // G√ºncelleme yap
            await sequelize.query(updateQuery, {
              replacements: values
            });
            
            fixedCount++;
          }
        }
        
        console.log(`  ‚úÖ Fixed ${fixedCount} records in ${tableName}`);
      } catch (error) {
        console.error(`  ‚ùå Error processing table ${tableName}:`, error.message);
      }
    }
    
    console.log('\nüéâ All tables processed successfully!');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await sequelize.close();
  }
}

fixAllTables();