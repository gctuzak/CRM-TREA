const { Sequelize } = require('sequelize');

// Database configuration with utf8mb4
const sequelize = new Sequelize({
  dialect: 'mysql',
  host: 'localhost',
  port: 3306,
  database: 'mydatabase',
  username: 'migration_user',
  password: 'migration_pass',
  
  dialectOptions: {
    charset: 'utf8mb4'
  },
  
  logging: false // Sadece √∂nemli loglarƒ± g√∂ster
});

// T√ºrk√ße karakter d√ºzeltme fonksiyonu - son versiyon
function fixTurkishChars(text) {
  if (!text) return text;
  
  // Bozuk T√ºrk√ße karakterleri d√ºzelt
  let fixed = text
    // Null karakterleri temizle
    .replace(/\u0000/g, '')
    
    // Soru i≈üaretlerini d√ºzelt
    .replace(/\?\?\?\? GYO/g, '√ñZEL GYO')
    .replace(/\?\?\? YAPIM/g, '√áAƒû YAPIM')
    .replace(/\?\?\?\?\?DEM/g, '√áƒ∞ƒûDEM')
    .replace(/\?\?\?gen/g, '√ú√ßgen')
    .replace(/\?\?\?GEN/g, '√ú√áGEN')
    .replace(/\?\?\?kr\?\?/g, '≈û√ºkr√º')
    .replace(/\?\?\?\?/g, '√ñZEL')
    .replace(/\?\?\?/g, '√áAƒû')
    
    // Yanlƒ±≈ü d√ºzeltilmi≈ü karakterleri d√ºzelt
    .replace(/ƒ∞/g, 'ƒ∞')
    .replace(/ƒ±/g, 'ƒ±')
    .replace(/≈ü/g, '≈ü')
    .replace(/ƒü/g, 'ƒü')
    .replace(/√º/g, '√º')
    .replace(/√∂/g, '√∂')
    .replace(/√ß/g, '√ß');
    
  return fixed;
}

// √ñzel kelime d√ºzeltme fonksiyonu
function fixSpecificWords(text) {
  if (!text) return text;
  
  // √ñzel kelime d√ºzeltmeleri
  let fixed = text
    .replace(/Sƒ∞TE Yƒ∞NETƒ∞Cƒ∞L√ñZELƒ∞/g, 'Sƒ∞TE Y√ñNETƒ∞Cƒ∞Lƒ∞ƒûƒ∞')
    .replace(/Sƒ∞TE Yƒ∞NETƒ∞Cƒ∞L/g, 'Sƒ∞TE Y√ñNETƒ∞Cƒ∞L')
    .replace(/Yƒ∞NETƒ∞M/g, 'Y√ñNETƒ∞M')
    .replace(/ƒ∞Nƒ∞AAT/g, 'ƒ∞N≈ûAAT')
    .replace(/ƒ∞Nƒ∞\./g, 'ƒ∞N≈û.')
    .replace(/Mƒ∞H\./g, 'M√úH.')
    .replace(/Tƒ∞RK/g, 'T√úRK')
    .replace(/Tƒ∞rk/g, 'T√ºrk')
    .replace(/GAYRƒ∞MENKƒ∞L/g, 'GAYRƒ∞MENKUL')
    .replace(/Mƒ∞TEAHHƒ∞T/g, 'M√úTEAHHƒ∞T')
    .replace(/Mƒ∞HENDƒ∞S/g, 'M√úHENDƒ∞S')
    .replace(/Mƒ∞HENDƒ∞SLƒ∞K/g, 'M√úHENDƒ∞SLƒ∞K')
    .replace(/Mƒ∞Dƒ∞R/g, 'M√úD√úR')
    .replace(/Mƒ∞Dƒ∞RL/g, 'M√úD√úRL')
    .replace(/ƒ∞ƒ∞RKET/g, '≈ûƒ∞RKET')
    .replace(/ƒ∞ƒ∞RK/g, '≈ûƒ∞RK')
    .replace(/ƒ∞RK/g, '≈ûRK')
    .replace(/ƒ∞Tƒ∞\./g, '≈ûTƒ∞.')
    .replace(/LTD\.ƒ∞Tƒ∞/g, 'LTD.≈ûTƒ∞')
    .replace(/A\.ƒ∞\./g, 'A.≈û.')
    .replace(/ƒ∞ƒ∞\./g, '≈ûƒ∞.')
    .replace(/T√ñZEL/g, 'T√úZEL')
    .replace(/ƒ∞letiƒ∞im/g, 'ƒ∞leti≈üim')
    .replace(/ƒ∞nƒ∞/g, 'ƒ∞n≈ü')
    .replace(/ƒ∞th/g, 'ƒ∞th')
    .replace(/ƒ∞hr/g, 'ƒ∞hr')
    .replace(/ƒ∞LET√ñZELƒ∞M/g, 'ƒ∞LETƒ∞≈ûƒ∞M')
    .replace(/GEL√ñZELTƒ∞RME/g, 'GELƒ∞≈ûTƒ∞RME');
    
  // √ñzel d√ºzeltmeler
  fixed = fixed
    .replace(/3K-ƒ∞LET√ñZELƒ∞M/g, '3K-ƒ∞LETƒ∞≈ûƒ∞M')
    .replace(/3S KALE GAYRƒ∞MENKUL GEL√ñZELTƒ∞RME/g, '3S KALE GAYRƒ∞MENKUL GELƒ∞≈ûTƒ∞RME');
    
  return fixed;
}

async function fixData() {
  try {
    // Test connection
    await sequelize.authenticate();
    console.log('‚úÖ Database connection established.');
    
    // CONTACT tablosundaki verileri d√ºzelt
    console.log('üîß Fixing CONTACT table data...');
    
    // √ñnce t√ºm kayƒ±tlarƒ± al
    const [contacts] = await sequelize.query(
      "SELECT ID, NAME, ADDRESS, CITY, STATE, COUNTRY, NOTE FROM CONTACT"
    );
    
    console.log(`üìä Found ${contacts.length} contacts to fix`);
    
    // Her kayƒ±t i√ßin T√ºrk√ße karakterleri d√ºzelt
    let fixedCount = 0;
    for (const contact of contacts) {
      // ƒ∞lk d√ºzeltme
      let fixedName = fixTurkishChars(contact.NAME);
      let fixedAddress = fixTurkishChars(contact.ADDRESS);
      let fixedCity = fixTurkishChars(contact.CITY);
      let fixedState = fixTurkishChars(contact.STATE);
      let fixedCountry = fixTurkishChars(contact.COUNTRY);
      let fixedNote = fixTurkishChars(contact.NOTE);
      
      // √ñzel kelime d√ºzeltmeleri
      fixedName = fixSpecificWords(fixedName);
      fixedAddress = fixSpecificWords(fixedAddress);
      fixedCity = fixSpecificWords(fixedCity);
      fixedState = fixSpecificWords(fixedState);
      fixedCountry = fixSpecificWords(fixedCountry);
      fixedNote = fixSpecificWords(fixedNote);
      
      // Eƒüer herhangi bir deƒüi≈üiklik varsa g√ºncelle
      if (fixedName !== contact.NAME || 
          fixedAddress !== contact.ADDRESS || 
          fixedCity !== contact.CITY || 
          fixedState !== contact.STATE || 
          fixedCountry !== contact.COUNTRY || 
          fixedNote !== contact.NOTE) {
        
        await sequelize.query(
          `UPDATE CONTACT SET 
           NAME = ?, 
           ADDRESS = ?, 
           CITY = ?, 
           STATE = ?, 
           COUNTRY = ?, 
           NOTE = ? 
           WHERE ID = ?`,
          {
            replacements: [
              fixedName, 
              fixedAddress, 
              fixedCity, 
              fixedState, 
              fixedCountry, 
              fixedNote, 
              contact.ID
            ]
          }
        );
        
        fixedCount++;
        if (fixedCount % 100 === 0) {
          console.log(`‚úÖ Fixed ${fixedCount} contacts so far`);
        }
      }
    }
    
    console.log(`üéâ Fixed ${fixedCount} contacts in total`);
    
    // Test sample data after fixing
    const [sampleData] = await sequelize.query(
      "SELECT NAME FROM CONTACT LIMIT 20"
    );
    console.log('üìÑ Sample data after fixing:');
    sampleData.forEach(item => console.log(` - ${item.NAME}`));
    
    // Diƒüer tablolarƒ± da kontrol et
    console.log('\nüîç Checking other tables for Turkish characters...');
    
    // OPPORTUNITY tablosu
    const [opportunities] = await sequelize.query(
      "SELECT ID, NAME FROM OPPORTUNITY LIMIT 5"
    );
    if (opportunities.length > 0) {
      console.log('\nüìÑ Sample OPPORTUNITY data:');
      opportunities.forEach(item => console.log(` - ${item.NAME}`));
    }
    
    // TASK tablosunun yapƒ±sƒ±nƒ± kontrol et
    try {
      const [taskColumns] = await sequelize.query(
        "SHOW COLUMNS FROM TASK"
      );
      console.log('\nüìã TASK table columns:');
      taskColumns.forEach(col => console.log(` - ${col.Field}`));
      
      // S√ºtun adlarƒ±nƒ± bulduktan sonra √∂rnek veri g√∂ster
      if (taskColumns.length > 0) {
        const [tasks] = await sequelize.query(
          `SELECT ID, ${taskColumns[1].Field} FROM TASK LIMIT 5`
        );
        if (tasks.length > 0) {
          console.log('\nüìÑ Sample TASK data:');
          tasks.forEach(item => console.log(` - ${item[taskColumns[1].Field]}`));
        }
      }
    } catch (error) {
      console.log('‚ùå Could not query TASK table:', error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await sequelize.close();
  }
}

fixData();